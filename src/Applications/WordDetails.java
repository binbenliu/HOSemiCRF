/*Copyright (C) 2012 Nguyen Viet Cuong, Ye Nan, Sumit BhagwaniThis file is part of HOSemiCRF.HOSemiCRF is free software: you can redistribute it and/or modifyit under the terms of the GNU General Public License as published bythe Free Software Foundation, either version 3 of the License, or(at your option) any later version.HOSemiCRF is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty ofMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See theGNU General Public License for more details.You should have received a copy of the GNU General Public Licensealong with HOSemiCRF. If not, see <http://www.gnu.org/licenses/>.*/package Applications;import java.util.*;/** * Details of words * @author Nguyen Viet Cuong */public class WordDetails {	String word; // Word	String pos_tag; // Part-of-speech of the word	String chunk_tag; // Phrase chunk of the word	String ne_tag; // Named entity of the word	String capPattern; // Capitalization pattern of the word	/**	 * Construct a null word	 */    public WordDetails() {        this.word = "";        this.pos_tag = "";        this.chunk_tag = "";        this.ne_tag = "";        this.capPattern = "null-pat";    }	/**	 * Construct a word from all the details.	 * @param word The word itself	 * @param tagPOS Part-of-speech of the word	 * @param tagChunk Phrase chunk of the word	 * @param tagNE Named entity tag of the word	 */    public WordDetails(String word, String tagPOS, String tagChunk, String tagNE, Dictionary dict) {        this.word = word;        this.pos_tag = tagPOS;        this.chunk_tag = tagChunk;        this.ne_tag = tagNE;        this.capPattern = pattern(word, dict);    }	/**	 * Return the capitalization pattern of a string.	 * @param s The input string	 * @return The capitalization pattern of the input string	 */    public String pattern(String s, Dictionary dict) {        StringBuffer sb = new StringBuffer();        TreeSet<Character> seenSet = new TreeSet<Character>();        for (int i = 0, l = s.length(); i < l; i++) {            char c = s.charAt(i);            char m = c;            if (Character.isLowerCase(c)) {                m = 'x';            } else if (Character.isUpperCase(c)) {                m = 'X';            } else if (Character.isDigit(c)) {                m = 'd';            }            if (i < 2 || i >= l - 2) {                sb.append(m);            } else {                seenSet.add(m);                if (i == l - 3) {                    for (Iterator it = seenSet.iterator(); it.hasNext();) {                        Character ch = (Character) it.next();                        sb.append(ch);                    }                }            }        }        if (dict.containsLCWord(s.toLowerCase())) {            sb.append("k");        }        return sb.toString();    }	/**	 * Get the word.	 * @return The word	 */    public String getWord() {        return word;    }	/**	 * Get the part-of-speech of the word.	 * @return The part-of-speech of the word	 */    public String getPOS() {        return pos_tag;    }	/**	 * Get the phrase chunk of the word.	 * @return The phrase chunk of the word	 */    public String getChunk() {        return chunk_tag;    }	/**	 * Get the named entity of the word.	 * @return The named entity of the word	 */    public String getNE() {        return ne_tag;    }	/**	 * Get the capitalization pattern of the word.	 * @return The capitalization of the word	 */    public String getCapPattern() {        return capPattern;    }		@Override	 	public String toString() {		return word + " " + pos_tag + " " + chunk_tag + " " + ne_tag;	}}